#!/usr/bin/env ruby

require 'optparse'
require 'colorize'

require 'git/message/version'
require 'git/message'

def getType (num)

  case num
  when '1'
    "feat"
  when '2'
    "fix"
  when '3'
    "docs"
  when '4'
    "style"
  when '5'
    "refactor" 
  when '6'
    "test"
  when '7'
    "chore"
  when '8'
    "debug"
  else
    ''            
  end

end

def runCommend (options)

  commitMessage = "#{options[:type]}[#{options[:scope]}]:#{options[:subject]}".strip

  puts ""
  puts "Commiting with message:#{commitMessage}".green
  puts ""

  command = 'git commit -m ' + commitMessage

  system command
  
end

options = {}
option_parser = OptionParser.new do |opts|
# 这里是这个命令行工具的帮助信息
opts.banner = 'here is help messages of git-message.'

# 下面第一项是 Short option（没有可以直接在引号间留空），第二项是 Long option，第三项是对 Option 的描述
opts.on('-v', '--version', 'version of git-message') do
  puts Git::Message::VERSION
  exit
end

opts.on('-t TYPE', '--type TYPE', 'Type of commit message') do |value|
  options[:type] = value
end

opts.on('-s SCOPE', '--scope SCOPE', 'Scope of commit message') do |value|
  options[:scope] = value
end

opts.on('-m MESSAGE', '--message MESSAGE', 'Subject of commit message') do |value|
  options[:subject] = value
end

  # # Option 作为 flag，带argument，用于将argument作为数值解析，比如"name"信息
  # #下面的“value”就是用户使用时输入的argument
  # opts.on('-n NAME', '--name Name', 'Pass-in single name') do |value|
  #   options[:name] = value
  # end

  # # Option 作为 flag，带一组用逗号分割的arguments，用于将arguments作为数组解析
  # opts.on('-a A,B', '--array A,B', Array, 'List of arguments') do |value|
  #   options[:array] = value
  # end
end.parse!

tempType    = String.new("#{options[:type]}")
tempScope   = String.new("#{options[:scope]}")
tempSubject = String.new("#{options[:subject]}")

if tempType.length == 0

  Git::Message::showTypeOption

  while (1)

   num = gets.chomp
   options[:type] = getType num

   break

 end

end

if tempScope.length == 0

  Git::Message::showScopeNote

  while (1)

   scope = gets.chomp
   options[:scope] = scope

   break

 end

end

if tempSubject.length == 0

  Git::Message::showMessage

  while (1)

   subject = gets.chomp
   options[:subject] = subject

   break

 end

end

runCommend options
