#!/usr/bin/env ruby

require 'optparse'
require 'colorize'
require 'commander/import'

require 'git/message/version'
require 'git/message'

def getType (type)

  case type
  when '1'
    "feat"
  when '2'
    "fix"
  when '3'
    "docs"
  when '4'
    "style"
  when '5'
    "refactor" 
  when '6'
    "test"
  when '7'
    "chore"
  when '8'
    "debug"
  else
    type            
  end

end

def runCommend (options)

  commitMessage = "#{options[:type]}[#{options[:scope]}]:#{options[:subject]}".strip

  puts ""
  puts "Commiting with message:#{commitMessage}".green
  puts ""

  command = 'git commit -m ' + commitMessage

  system command
  
end

never_trace!
default_command :creat

program :name, 'git-message'
program :version, Git::Message::VERSION
program :description, 'A plugin of Git for creating a Angular style commit message.'

command :creat do |c|

  c.option '-t', '--type STRING', String, 'Type of commit message'
  c.option '-s', '--scope STRING', String, 'Scope of commit message'
  c.option '-m', '--message STRING', String, 'Subject of commit message'

  c.action do |args, options|

    data = {}
    data[:type]    = getType options.type
    data[:scope]   = options.scope
    data[:subject] = options.message

    tempType    = String.new("#{data[:type]}")
    tempScope   = String.new("#{data[:scope]}")
    tempSubject = String.new("#{data[:subject]}")

    if tempType.length == 0

      type = choose("Type of your commit?", :feat, :fix, :docs, :style, :refactor, :test, :chore, :debug)
      data[:type] = type

    end

    if tempScope.length == 0

      scope = ask("Scope of your commit: ")
      data[:scope] = scope

    end

    if tempSubject.length == 0

      subject = ask("Subject of your commit: ")
      data[:subject] = subject

    end

    runCommend data

  end

end
